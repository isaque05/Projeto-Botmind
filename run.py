#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do ChatBot
"""
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, str(Path(__file__).parent))

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print("ü§ñ Iniciando ChatBot Inteligente...")
    print("=" * 50)
    
    try:
        # Importar e executar a aplica√ß√£o
        from app import app, db_manager, config
        
        # Validar configura√ß√µes
        config_issues = config.validate_config()
        if config_issues:
            print("‚ö†Ô∏è Avisos de configura√ß√£o:")
            for issue in config_issues:
                print(f"  {issue}")
            print()
        
        # Verificar banco de dados
        if db_manager.test_connection():
            print("‚úÖ Banco de dados conectado")
        else:
            print("‚ùå Erro na conex√£o com banco de dados")
            return
        
        # Inicializar banco se necess√°rio
        db_manager.init_database()
        print("‚úÖ Banco de dados inicializado")
        
        # Mostrar informa√ß√µes da aplica√ß√£o
        print(f"üåê Servidor: http://{config.HOST}:{config.PORT}")
        print(f"üîß Modo: {'Desenvolvimento' if config.DEBUG else 'Produ√ß√£o'}")
        print(f"ü§ñ Gemini: {'Ativado' if config.GEMINI_API_KEY else 'Desativado'}")
        print("=" * 50)
        print("‚ú® ChatBot pronto! Acesse o navegador para come√ßar a conversar.")
        print("üí° Dica: Use Ctrl+C para parar o servidor")
        print()
        
        # Executar aplica√ß√£o
        app.run(debug=config.DEBUG, host=config.HOST, port=config.PORT)
        
    except KeyboardInterrupt:
        print("\nüëã ChatBot encerrado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar ChatBot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
